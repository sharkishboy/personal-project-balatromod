[manifest]
version = "1.0.0"
priority = 0

# the following patches are to allow permanent extra mult

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
        if specific_vars.bonus_chips then
            localize{type = 'other', key = 'card_extra_chips', nodes = desc_nodes, vars = {specific_vars.bonus_chips}}
        end
'''
position = "after"
match_indent = true
payload = '''
if specific_vars.bonus_mult then
    localize{type = 'other', key = 'card_extra_mult', nodes = desc_nodes, vars = {specific_vars.bonus_mult}}
end
'''
times = 1

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
        if _c.name ~= 'Stone Card' and ((specific_vars and specific_vars.bonus_chips) or (cfg.bonus ~= 0 and cfg.bonus)) then
            localize{type = 'other', key = 'card_extra_chips', nodes = desc_nodes, vars = {((specific_vars and specific_vars.bonus_chips) or cfg.bonus)}}
        end
'''
position = "after"
match_indent = true
payload = '''
if specific_vars and specific_vars.bonus_mult then
    localize{type = 'other', key = 'card_extra_mult', nodes = desc_nodes, vars = {specific_vars.bonus_mult}}
end
'''
times = 1

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''perma_bonus = self.ability and self.ability.perma_bonus or 0,'''
position = "after"
match_indent = true
payload = '''perma_mult = self.ability and self.ability.perma_mult or 0,'''
times = 1

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
        loc_vars = { playing_card = not not self.base.colour, value = self.base.value, suit = self.base.suit, colour = self.base.colour,
                    nominal_chips = self.base.nominal > 0 and self.base.nominal or nil,
                    bonus_chips = (self.ability.bonus + (self.ability.perma_bonus or 0)) > 0 and (self.ability.bonus + (self.ability.perma_bonus or 0)) or nil,
'''
position = "after"
match_indent = true
payload = '''
            bonus_mult = (self.ability.perma_mult and self.ability.perma_mult > 0) and self.ability.perma_mult or nil,
'''
times = 1
